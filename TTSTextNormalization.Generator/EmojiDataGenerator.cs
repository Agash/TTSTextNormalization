using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Immutable;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace TTSTextNormalization.EmojiDataGenerator;

[Generator]
public class EmojiGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext initContext)
    {
        //if (!Debugger.IsAttached)
        //    Debugger.Launch();

        // get the additional text provider
        IncrementalValuesProvider<AdditionalText> additionalTexts =
            initContext.AdditionalTextsProvider;

        // apply a 1-to-1 transform on each text, extracting the contents
        IncrementalValuesProvider<string> transformed = additionalTexts.Select(
            static (text, _) => text?.GetText()?.ToString() ?? string.Empty
        );

        // collect the contents into a batch
        IncrementalValueProvider<ImmutableArray<string>> collected = transformed.Collect();

        // take the file contents from the above batch and make some user visible syntax
        initContext.RegisterSourceOutput(
            collected,
            static (sourceProductionContext, textContents) =>
            {
                if (textContents.IsDefaultOrEmpty)
                {
                    sourceProductionContext.ReportDiagnostic(
                        Diagnostic.Create(
                            new DiagnosticDescriptor(
                                "SWTTSTN001",
                                "Missing Emoji Data File",
                                "The emoji data file 'data-by-emoji.json' is missing.",
                                "FileNotFound",
                                DiagnosticSeverity.Error,
                                true
                            ),
                            Location.None
                        )
                    );
                    return;
                }

                string? emojiFileContent = textContents.FirstOrDefault();
                if (string.IsNullOrEmpty(emojiFileContent))
                {
                    sourceProductionContext.ReportDiagnostic(
                        Diagnostic.Create(
                            new DiagnosticDescriptor(
                                "SWTTSTN002",
                                "Invalid Emoji Data File",
                                "The emoji data file 'data-by-emoji.json' is empty or invalid.",
                                "FileError",
                                DiagnosticSeverity.Error,
                                true
                            ),
                            Location.None
                        )
                    );
                    return;
                }

                JsonDocument jsonDocument = JsonDocument.Parse(
                    emojiFileContent!,
                    new JsonDocumentOptions
                    {
                        AllowTrailingCommas = true,
                        CommentHandling = JsonCommentHandling.Skip,
                    }
                );

                Dictionary<string, EmojiEntry>? emojiData = jsonDocument.Deserialize<Dictionary<string, EmojiEntry>>(
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                );

                if (emojiData == null)
                {
                    sourceProductionContext.ReportDiagnostic(
                        Diagnostic.Create(
                            new DiagnosticDescriptor(
                                "SWTTSTN003",
                                "Invalid Emoji Data Format",
                                "The emoji data file 'data-by-emoji.json' is not in the expected format.",
                                "FileFormatError",
                                DiagnosticSeverity.Error,
                                true
                            ),
                            Location.None
                        )
                    );
                    return;
                }

                StringBuilder sb = new();
                sb.AppendLine(
                    """
                    // <auto-generated/>
                    // Generated by EmojiDataGenerator
                    #nullable enable
                    using System;
                    using System.Collections.Frozen;
                    using System.Collections.Generic;
                    using System.Text.RegularExpressions;

                    namespace TTSTextNormalization.EmojiDataGenerated;

                    internal static partial class EmojiData
                    {
                        public static readonly FrozenDictionary<string, string> EmojiToNameMap;
                        public static readonly Regex EmojiMatchRegex;

                        static EmojiData()
                        {
                            var mapBuilder = new Dictionary<string, string>(StringComparer.Ordinal)
                            {
                    """
                );

                foreach (KeyValuePair<string, EmojiEntry> keyValue in emojiData)
                {
                    string key = SymbolDisplay.FormatLiteral(keyValue.Key, true);
                    string value = keyValue.Value.Name.Replace("\"", "\\\"");
                    sb.AppendLine($"            {{ {key}, \"{value}\" }},");
                }

                sb.AppendLine(
                    """
                            };
                            EmojiToNameMap = mapBuilder.ToFrozenDictionary(StringComparer.Ordinal);
                    """
                );

                string pattern = string.Join(
                    "|",
                    emojiData.Keys.OrderByDescending(k => k.Length).Select(Regex.Escape)
                );
                sb.AppendLine($"        const string pattern = @\"{pattern}\";");
                sb.AppendLine(
                    """
                            EmojiMatchRegex = new Regex(pattern, RegexOptions.Compiled, TimeSpan.FromMilliseconds(200));
                        }
                    }
                    #nullable restore
                    """
                );

                sourceProductionContext.AddSource(
                    "EmojiData.g.cs",
                    SourceText.From(sb.ToString(), Encoding.UTF8)
                );
            }
        );
    }

    private class EmojiEntry
    {
        public string Name { get; set; } = string.Empty;
        public string Slug { get; set; } = string.Empty;
        public string Group { get; set; } = string.Empty;
        public string Emoji_version { get; set; } = string.Empty;
        public string Unicode_version { get; set; } = string.Empty;
        public bool Skin_tone_support { get; set; }
    }
}
